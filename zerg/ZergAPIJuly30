#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jul 20 15:44:19 2018

@author: tonyshi
"""
from pysc2.agents import base_agent
from pysc2.env import sc2_env
from pysc2.lib import actions, features, units
from absl import app
import random

class ZergAgent(base_agent.BaseAgent):
  inactive_drone_selected = False
  drone_sent_to_harvest = False

  def __init__(self):
    super(ZergAgent, self).__init__()
    
    self.attack_coordinates = None

  def unit_type_is_selected(self, obs, unit_type):
    if (len(obs.observation.single_select) > 0 and
        obs.observation.single_select[0].unit_type == unit_type):
      return True
    
    if (len(obs.observation.multi_select) > 0 and
        obs.observation.multi_select[0].unit_type == unit_type):
      return True
    
    return False

  def get_units_by_type(self, obs, unit_type):
    return [unit for unit in obs.observation.feature_units
            if unit.unit_type == unit_type]
  
  def can_do(self, obs, action):
    return action in obs.observation.available_actions

  def step(self, obs):
    a = 0
    b = 0
    c = 0
    zerglings = self.get_units_by_type(obs, units.Zerg.Zergling)
    overlords = self.get_units_by_type(obs, units.Zerg.Overlord)
    drones = self.get_units_by_type(obs, units.Zerg.Drone)
    
    super(ZergAgent, self).step(obs)
    
    if obs.first():
      player_y, player_x = (obs.observation.feature_minimap.player_relative ==
                            features.PlayerRelative.SELF).nonzero()
      xmean = player_x.mean()
      ymean = player_y.mean()
      
      if xmean <= 31 and ymean <= 31:
        self.attack_coordinates = (49, 49)
      else:
        self.attack_coordinates = (12, 16)

    
    if len(zerglings) >= 10:
      if self.unit_type_is_selected(obs, units.Zerg.Zergling):
        if self.can_do(obs, actions.FUNCTIONS.Attack_minimap.id):
          return actions.FUNCTIONS.Attack_minimap("now",
                                                  self.attack_coordinates)

      if self.can_do(obs, actions.FUNCTIONS.select_army.id):
        return actions.FUNCTIONS.select_army("select")
    
    for i in range(0, 2):
        if len(drones) < 10:
            if self.can_do(obs, actions.FUNCTIONS.Train_Drone_quick.id):
                return actions.FUNCTIONS.Train_Drone_quick("now")
    
    print("1")
    spawning_pools = self.get_units_by_type(obs, units.Zerg.SpawningPool)
    if len(spawning_pools) == 0:
      if self.unit_type_is_selected(obs, units.Zerg.Drone):
        if self.can_do(obs, actions.FUNCTIONS.Build_SpawningPool_screen.id):
          x = random.randint(0, 83)
          y = random.randint(0, 83)
          return actions.FUNCTIONS.Build_SpawningPool_screen("now", (x, y))
      drones = self.get_units_by_type(obs, units.Zerg.Drone)
      if len(drones) > 0:
            drone = random.choice(drones)
            return actions.FUNCTIONS.select_point("select", (drone.x, drone.y))
        
    for i in range(0, 1):
        if len(drones) < 2:
            if self.can_do(obs, actions.FUNCTIONS.Train_Drone_quick.id):
                return actions.FUNCTIONS.Train_Drone_quick("now")
            
    for i in range(0, 1):
        if len(overlords) < 5:
            if self.can_do(obs, actions.FUNCTIONS.Train_Overlord_quick.id):
                return actions.FUNCTIONS.Train_Overlord_quick("now")      
      
    print("3")      
    if self.unit_type_is_selected(obs, units.Zerg.Larva):
      free_supply = (obs.observation.player.food_cap -
                     obs.observation.player.food_used)
      if free_supply == 0:
        if self.can_do(obs, actions.FUNCTIONS.Train_Overlord_quick.id):
          return actions.FUNCTIONS.Train_Overlord_quick("now")
      
      if len(zerglings) <= 10: 
          if self.can_do(obs, actions.FUNCTIONS.Train_Zergling_quick.id):
              return actions.FUNCTIONS.Train_Zergling_quick("now")
    
    larvae = self.get_units_by_type(obs, units.Zerg.Larva)
    if len(larvae) > 0:
      larva = random.choice(larvae)
      return actions.FUNCTIONS.select_point("select", (larva.x,
                                                                larva.y))

    geysers = self.get_units_by_type(obs, units.Neutral.VespeneGeyser)
    extractor = self.get_units_by_type(obs, units.Zerg.Extractor)
    if len(extractor) < 2:
        if self.unit_type_is_selected(obs, units.Zerg.Drone):
            if self.can_do(obs, actions.FUNCTIONS.Build_Extractor_screen.id):
                for i in range(0,1):
                    x = geysers[i].x
                    y = geysers[i].y
                return actions.FUNCTIONS.Build_Extractor_screen("now", (x, y))
                """
    print("2")
    extractor = self.get_units_by_type(obs, units.Zerg.Extractor)
    if len(extractor) < 2:
        if self.unit_type_is_selected(obs, units.Zerg.Drone):
            x = random.randint(0, 83)
            y = random.randint(0, 83)
            if self.can_do(obs, actions.FUNCTIONS.Build_Extractor_screen.id):
                coordinate_x = x
                coordinate_y = y
                return actions.FUNCTIONS.Build_Extractor_screen("now", (x, y))"""
                    
    evolution_chamber = self.get_units_by_type(obs, units.Zerg.EvolutionChamber)
    if len(evolution_chamber) == 0:
      if self.unit_type_is_selected(obs, units.Zerg.Drone):
        if self.can_do(obs, actions.FUNCTIONS.Build_EvolutionChamber_screen.id):
          x = random.randint(0, 83)
          y = random.randint(0, 83)
          
          return actions.FUNCTIONS.Build_EvolutionChamber_screen("now", (x, y))
    
    roach_warren = self.get_units_by_type(obs, units.Zerg.RoachWarren)
    if len(roach_warren) == 0:
      if self.unit_type_is_selected(obs, units.Zerg.Drone):
        if self.can_do(obs, actions.FUNCTIONS.Build_RoachWarren_screen.id):
          x = random.randint(0, 83)
          y = random.randint(0, 83)
          
          return actions.FUNCTIONS.Build_RoachWarren_screen("now", (x, y))
      
      drones = self.get_units_by_type(obs, units.Zerg.Drone)
      if len(drones) > 0 and c < 1:
          drone = random.choice(drones)
          c += 1
          return actions.FUNCTIONS.select_point("select", (drone.x, drone.y))

      
    for i in range(0, 1):
        if len(drones) < 7:
            if self.can_do(obs, actions.FUNCTIONS.Train_Drone_quick.id):
                return actions.FUNCTIONS.Train_Drone_quick("now")
            
    for i in range(0, 1):
        if len(drones) < 10:
            if self.can_do(obs, actions.FUNCTIONS.Train_Drone_quick.id):
                return actions.FUNCTIONS.Train_Drone_quick("now")
    for i in range(0, 2):
        if self.can_do(obs, actions.FUNCTIONS.Train_Zergling_quick.id):
            return actions.FUNCTIONS.Train_Zergling_quick("now")
        
    
    if self.unit_type_is_selected(obs, units.Zerg.Drone):
        if self.can_do(obs, actions.FUNCTIONS.Rally_Workers_screen.id):
            return actions.FUNCTIONS.Rally_Workers_screen("now", (45, 45))
        drones = self.get_units_by_type(obs, units.Zerg.Drone)
        if len(drones) > 0 and c < 1:
            drone = random.choice(drones)
            c += 1
            return actions.FUNCTIONS.select_point("select", (drone.x, drone.y))
     
    """  
    print("7")
    if self.can_do(obs, actions.FUNCTIONS.Train_Drone_quick.id):
      return actions.FUNCTIONS.Train_Drone_quick("now")
    print("8")
    if self.can_do(obs, actions.FUNCTIONS.Rally_Workers_screen.id):
      return actions.FUNCTIONS.Rally_Workers_screen("now", (45, 45))
    """
    print("9")
    _SELECT_IDLE_WORKER = actions.FUNCTIONS.select_idle_worker.id
    _HARVEST_GATHER_SCREEN = actions.FUNCTIONS.Harvest_Gather_screen.id
    _UNIT_TYPE = features.SCREEN_FEATURES.unit_type.index
    unit_type = obs.observation["feature_screen"][_UNIT_TYPE]
    drone_y, drone_x = (unit_type == units.Zerg.Drone).nonzero()
    geyser_y, geyser_x = (unit_type == units.Neutral.VespeneGeyser).nonzero()
    geysers = self.get_units_by_type(obs, units.Neutral.VespeneGeyser)
    drones = self.get_units_by_type(obs, units.Zerg.Drone)
    if len(drones) > 0:
        print("10")
        drone = random.choice(drones)
        if self.can_do(obs, actions.FUNCTIONS.Rally_Workers_screen.id):
            return actions.FUNCTIONS.select_point("select", (drone.x, drone.y))
        
        print("11")
        if self.can_do(obs, actions.FUNCTIONS.Rally_Workers_screen.id):
            for i in range(0,1):
                return actions.FUNCTIONS.Rally_Workers_screen("now", (geysers[i].x, geysers[i].y))
        #return actions.FUNCTIONS.Harvest_Gather_screen("now", target)
    """
    print("4")
    if self.drone_sent_to_harvest == False:
        if self.inactive_drone_selected == False :
            if _SELECT_IDLE_WORKER in obs.observation["available_actions"]:
                print("5")
                self.inactive_drone_selected = True
                return actions.FUNCTIONS.select_idle_worker("select")
        else:
            if _HARVEST_GATHER_SCREEN in obs.observation["available_actions"]:
                print("6")
                self.drone_sent_to_harvest = True
                target = [geyser_x[0], geyser_y[0]]
                return actions.FUNCTIONS.Harvest_Gather_screen("now", target)
            return actions.FUNCTIONS.no_op()"""

    """print("3")
    drones = self.get_units_by_type(obs, units.Zerg.Drone)
    if len(drones) > 0 and a < 1:
        drone = random.choice(drones)
        a += 1
        return actions.FUNCTIONS.select_point("select", (drone.x,
                                                                  drone.y))
        
    if self.can_do(obs, actions.FUNCTIONS.Train_Drone_quick.id):
        return actions.FUNCTIONS.Train_Drone_quick("now")
    if self.can_do(obs, actions.FUNCTIONS.Rally_Workers_screen.id):
        return actions.FUNCTIONS.Rally_Hatchery_Workers_screen("now", (45, 45))

    print("4")   
    _HARVEST_GATHER_SCREEN = actions.FUNCTIONS.Harvest_Gather_screen.id
    _SELECT_IDLE_WORKER = actions.FUNCTIONS.select_idle_worker.id
    print("5")
    if _SELECT_IDLE_WORKER in obs.observation["available_actions"]:
        self.inactive_drone_selected = True
        return actions.FUNCTIONS.select_idle_worker("select")
    print("6")        
    if _HARVEST_GATHER_SCREEN in obs.observation["available_actions"]:
        self.drone_sent_to_harvest = True
        target = [coordinate_x, coordinate_y]
        return actions.FUNCTIONS.Harvest_Gather_screen("now", target)
    
    """
    
    """
    i = 0
    drones = self.get_units_by_type(obs, units.Zerg.Drone)
    if len(drones) > 0 and i == 0:
        i +=1
        drone = random.choice(drones)
        return actions.FUNCTIONS.select_point("select", (drone.x,
                                                                  drone.y))
      
    extractor = self.get_units_by_type(obs, units.Zerg.Extractor)
    if len(extractor) <= 2:
      print("1")
      if self.unit_type_is_selected(obs, units.Zerg.Drone):
        print("2")
        if self.can_do(obs, actions.FUNCTIONS.Build_Extractor_screen.id):
          print("3")  
          x = random.randint(0, 83)
          y = random.randint(0, 83)
          return actions.FUNCTIONS.Build_Extractor_screen("now", (x, y))
      
        """
    
    
    
    """
            self.inactive_drone_selected = True
            return actions.FUNCTIONS.select_idle_worker("select")
            target = [gas_coordinate_x, gas_coordinate_y]
            return actions.FUNCTIONS.Harvest_Gather_screen("now", target)
            
        
            _HARVEST_GATHER_SCREEN = actions.FUNCTIONS.Harvest_Gather_screen.id
            _SELECT_IDLE_WORKER = actions.FUNCTIONS.select_idle_worker.id

    
            if _SELECT_IDLE_WORKER in obs.observation["available_actions"]:
                self.inactive_drone_selected = True
                return actions.FUNCTIONS.select_idle_worker("select")
            
            if _HARVEST_GATHER_SCREEN in obs.observation["available_actions"]:
                self.drone_sent_to_harvest = True
                target = [gas_coordinate_x, gas_coordinate_y]
                return actions.FUNCTIONS.Harvest_Gather_screen("now", target)
"""
        
            
    roach_warren = self.get_units_by_type(obs, units.Zerg.RoachWarren)
    if len(roach_warren) == 0:
      if self.unit_type_is_selected(obs, units.Zerg.Drone):
        if self.can_do(obs, actions.FUNCTIONS.Build_RoachWarren_screen.id):
          x = random.randint(0, 83)
          y = random.randint(0, 83)
          
          return actions.FUNCTIONS.Build_RoachWarren_screen("now", (x, y))
      
      
    return actions.FUNCTIONS.no_op()

  def buildBuilding(self, obs, BuildingName):
      drones = self.get_units_by_type(obs, units.Zerg.Drone)
      if len(drones) > 0:
        drone = random.choice(drones)
        return actions.FUNCTIONS.select_point("select", (drone.x,
                                                              drone.y))
      """selected = False
      if (len(obs.observation.single_select) > 0 and
        obs.observation.single_select[0].Drone == Drone):
          selected = True
    
      if (len(obs.observation.multi_select) > 0 and
        obs.observation.multi_select[0].Drone == Drone):
          selected = True
      """
      if(BuildingName == "evolution chamber"):
          x = random.randint(0, 83)
          y = random.randint(0, 83)
          actions.FUNCTIONS.select_point("select", (drone.x,
                                                                 drone.y))
          return actions.FUNCTIONS.Build_EvolutionChamber_screen("now", (x, y))
      
      if(BuildingName == "extractor"):
          x = random.randint(0, 83)
          y = random.randint(0, 83)
          actions.FUNCTIONS.select_point("select_all_type", (drone.x,
                                                                 drone.y))
          return actions.FUNCTIONS.Build_Extractor_screen("now", (x, y))
      
      if(BuildingName == "roach warren"):
          x = random.randint(0, 83)
          y = random.randint(0, 83)
          
          actions.FUNCTIONS.select_point("select", (drone.x,
                                                                 drone.y))
          return actions.FUNCTIONS.Build_RoachWarren_screen("now", (x, y))
      
      if(BuildingName == "hydralisk den"):
          x = random.randint(0, 83)
          y = random.randint(0, 83)
          actions.FUNCTIONS.select_point("select", (drone.x,
                                                                 drone.y))
          return actions.FUNCTIONS.Build_HydraliskDen_screen("now", (x, y))
      
      if(BuildingName == "hive"):
          x = random.randint(0, 83)
          y = random.randint(0, 83)
          actions.FUNCTIONS.select_point("select", (drone.x,
                                                                 drone.y))
          return actions.FUNCTIONS.Morph_Hive_quick("now", (x, y))
      
      if(BuildingName == "lair"):
          x = random.randint(0, 83)
          y = random.randint(0, 83)
          actions.FUNCTIONS.select_point("select", (drone.x,
                                                                 drone.y))
          return actions.FUNCTIONS.Morph_Lair_quick("now", (x, y))
      
  def buildUnits(self, obs, UnitName, Quantity):
      """selected = False
      if (len(obs.observation.single_select) > 0 and
        obs.observation.single_select[0].Larva == Larva):
          selected = True
    
      if (len(obs.observation.multi_select) > 0 and
        obs.observation.multi_select[0].Larva == Larva):
          selected = True"""
          
      """drones, overlords, zerglings, roaches, hydralisks, corrupters, queen(may need own function)"""    
      actions.FUNCTIONS.select_larva("select")
      if (UnitName == "drone"):
          if self.can_do(obs, actions.FUNCTIONS.Train_Zergling_quick.id):
              return actions.FUNCTIONS.Train_Drone_quick("now")
      if (UnitName == "overlord"):
          if self.can_do(obs, actions.FUNCTIONS.Train_Zergling_quick.id):
              return actions.FUNCTIONS.Train_Overlord_quick("now")
      if (UnitName == "zergling"):
          if self.can_do(obs, actions.FUNCTIONS.Train_Zergling_quick.id):
              return actions.FUNCTIONS.Train_Zergling_quick("now")
      if (UnitName == "Roach"):
          if self.can_do(obs, actions.FUNCTIONS.Train_Zergling_quick.id):
              return actions.FUNCTIONS.Train_Roach_quick("now")
      if (UnitName == "hydralisks"):
          if self.can_do(obs, actions.FUNCTIONS.Train_Zergling_quick.id):
              return actions.FUNCTIONS.Train_Hydralisk_quick("now")
      if (UnitName == "corruptor"):
          if self.can_do(obs, actions.FUNCTIONS.Train_Zergling_quick.id):
              return actions.FUNCTIONS.Train_Corruptor_quick("now")
          """UnitsForControlGroup: [#drone, #zergling, #roaches, #hydralisks]"""
          
  def makeControlGroup(self, obs, UnitsForControlGroup):
      """drones"""
      if (UnitsForControlGroup[0] > 0):
          drones = self.get_units_by_type(obs, units.Zerg.Drone)
          drone = random.choice(drones)
          if (drones > UnitsForControlGroup[0]):
              return actions.FUNCTIONS.select_point("select_all_type", (drone.x,
                                                                  drone.y))
              
      if (UnitsForControlGroup[1] > 0):
          zerglings = self.get_units_by_type(obs, units.Zerg.Zergling)
          if (zerglings > UnitsForControlGroup[1]):
              for i in range (1, UnitsForControlGroup[1]):
                  zergling = random.choice(zerglings)
                  return actions.FUNCTIONS.select_point("select"), (zergling.x, zergling.y)
              
      if (UnitsForControlGroup[2] > 0):
          roaches = self.get_units_by_types(obs, units.Zerg.Roaches)
          if (roaches > UnitsForControlGroup[2]):
              for i in range (1, UnitsForControlGroup[2]):
                  roach = random.choice(roaches)
                  return actions.FUNCTIONS.select_point("select"), (roach.x, roach.y)
              
      if (UnitsForControlGroup[2] > 0):
          hydralisks = self.get_units_by_types(obs, units.Zerg.Hydralisks)
          if (hydralisks > UnitsForControlGroup[2]):
              for i in range (1, UnitsForControlGroup[3]):
                  hydralisk = random.choice(hydralisks)
                  return actions.FUNCTIONS.select_point("select"), (hydralisk.x, hydralisk.y)
    
      if self.can_do(obs, actions.FUNCTIONS.select_army.id):
        return actions.FUNCTIONS.select_army("select")
    
      if self.can_do(obs, actions.FUNCTIONS.Attack_minimap.id):
          return actions.FUNCTIONS.Attack_minimap("now",
                                                  self.attack_coordinates)

  def moveControlGroup(self, obs, controlGroup, moveType, absoluteX, absoluteY):
      actionType = moveType
      group = controlGroup
      x = absoluteX
      y = absoluteY
      if(actionType == "append"):    
          self.attack_coordinates = (x, y)
          if self.can_do(obs, actions.FUNCTIONS.select_army.id):
              return actions.FUNCTIONS.select_army("select")
          
          if self.can_do(obs, actions.FUNCTIONS.Attack_minimap.id):
                return actions.FUNCTIONS.Attack_minimap("now",
                                                  self.attack_coordinates)
                
  def myBuildings(self, obs):
      """[hatchery, spawning pool, evolution chamber, extractor, roach warren, hydralisk den, spire]"""
      buildingData = [0, 0, 0, 0, 0, 0, 0, 0]
      
      hatchery = self.get_units_by_type(obs, units.Zerg.hatchery)
      roachWarren = self.get_units_by_type(obs, units.Zerg.RoachWarren)
      spawningPool = self.get_units_by_type(obs, units.Zerg.SpawningPool)
      extractor = self.get_units_by_type(obs, units.Zerg.Extractor)
      hydraliskDen = self.get_units_by_type(obs, units.Zerg.hydraliskDen)
      evolutionChamber = self.get_units_by_type(obs, units.Zerg.EvolutionChamber)
      spire = self.get_units_by_type(obs, units.Zerg.Spire)
      
      if len(hatchery) > 0:
          buildingData[0] = len(hatchery)
      if len(spawningPool) > 0:
          buildingData[1] = len(spawningPool)
      if len(evolutionChamber) > 0:
          buildingData[2] = len(evolutionChamber)
      if len(extractor) > 0:
          buildingData[3] = len(extractor)
      if len(roachWarren) > 0:
          buildingData[4] = len(roachWarren)
      if len(hydraliskDen) > 0:
          buildingData[0] = len(hydraliskDen)
      if len(spire) > 0:
          buildingData[0] = len(spire)
          
      return buildingData
  
  def enemyBuildings(self, obs):
      enemyBuildingData = [0, 0, 0, 0, 0, 0, 0, 0]
      enemyRace = ""
      
      if enemyRace == "terrain":
          return enemyBuildingData
      if enemyRace == "zerg":
          return enemyBuildingData
      if enemyRace == "protoss":
          return enemyBuildingData
      
  def enemyUnits(self, obs):
      enemyUnits = [0, 0, 0, 0, 0, 0, 0, 0]
      enemyRace = ""
      
      if enemyRace == "terrain":
          return enemyUnits
      if enemyRace == "zerg":
          return enemyUnits
      if enemyRace == "protoss":
          return enemyUnits
      
  """x, y should be in range of 25--65"""
  def expand(self, obs):
      drones = self.get_units_by_type(obs, units.Zerg.Drone)
      if len(drones) <=10:
          if self.can_do(obs, actions.FUNCTIONS.Train_Zergling_quick.id):
              return actions.FUNCTIONS.Train_Drone_quick("now")
              
      queen = self.get_units_by_type(obs, units.Zerg.Queen)
      if len(queen) == 0:
          if self.can_do(obs, actions.FUNCTION.Train_Drone_quick.id):
              return actions.FUNCTIONS.Train_Queen_quick("now")
      
      hatchery = self.get_units_by_type(obs, units.Zerg.hatchery)
      x = random.randint(25, 65)
      y = random.randint(25, 65)
      drone = random.choice(drones)
      actions.FUNCTIONS.select_point("select", (drone.x, drone.y))
      return actions.FUNCTIONS.Build_Hatchery_screen("now", (x, y))
  
  """need specific information from API"""
  def myBaseLoc():
      basex = 0
      basey = 0
      
      return (basex, basey)
  
  def enemyBaseLoc(x1, y1):
      enx = x1
      eny = y1
      return(enx, eny)
  
  def camera():
      return ""
  
def main(unused_argv):
  agent = ZergAgent()
  try:
    while True:
      with sc2_env.SC2Env(
          map_name="Simple64",
          players=[sc2_env.Agent(sc2_env.Race.zerg),
                   sc2_env.Bot(sc2_env.Race.random,
                               sc2_env.Difficulty.easy)],
          agent_interface_format=features.AgentInterfaceFormat(
              feature_dimensions=features.Dimensions(screen=84, minimap=64),
              use_feature_units=True),
          step_mul=16,
          game_steps_per_episode=0,
          visualize=True) as env:
          
        agent.setup(env.observation_spec(), env.action_spec())
        
        timesteps = env.reset()
        agent.reset()
        
        while True:
          step_actions = [agent.step(timesteps[0])]
          if timesteps[0].last():
            break
          timesteps = env.step(step_actions)
      
  except KeyboardInterrupt:
    pass
  
if __name__ == "__main__":
  app.run(main)
